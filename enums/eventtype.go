// generated by jsonenums -suffix= -type=EventType; DO NOT EDIT

package enums

import (
	"encoding/json"
	"fmt"
)

var (
	_EventTypeNameToValue = map[string]EventType{
		"ABANDONED_CART":        AbandonedCart,
		"ADDED_COMPARE":         AddedCompare,
		"ADDED_PRODUCT":         AddedProduct,
		"ADDED_WISHLIST":        AddedWishlist,
		"CAMPAIGN_BLACKLISTED":  CampaignBlacklisted,
		"CAMPAIGN_BOUNCED":      CampaignBounced,
		"CAMPAIGN_LINK_CLICKED": CampaignLinkClicked,
		"CAMPAIGN_MARKED_SPAM":  CampaignMarkedSpam,
		"CAMPAIGN_OPENED":       CampaignOpened,
		"CAMPAIGN_SENT":         CampaignSent,
		"CAMPAIGN_SUBSCRIBED":   CampaignSubscribed,
		"CAMPAIGN_UNSUBSCRIBED": CampaignUnsubscribed,
		"CHANGED_SETTING":       ChangedSetting,
		"CLICKED_LINK":          ClickedLink,
		"CLOSED_TICKET":         ClosedTicket,
		"COMPLETED_ORDER":       CompletedOrder,
		"EVENT_CONFIRMED":       EventConfirmed,
		"EVENT_DECLINED":        EventDeclined,
		"EVENT_ELIGIBLE":        EventEligible,
		"EVENT_INVITED":         EventInvited,
		"EVENT_NOT_SHOW":        EventNotShow,
		"EVENT_NOT_INVITED":     EventNotInvited,
		"EVENT_PARTICIPATED":    EventParticipated,
		"FORM_COMPILED":         FormCompiled,
		"GENERIC_ACTIVE_EVENT":  GenericActiveEvent,
		"GENERIC_PASSIVE_EVENT": GenericPassiveEvent,
		"LOGGED_IN":             LoggedIn,
		"LOGGED_OUT":            LoggedOut,
		"OPENED_TICKET":         OpenedTicket,
		"ORDER_SHIPPED":         OrderShipped,
		"REMOVED_COMPARE":       RemovedCompare,
		"REMOVED_PRODUCT":       RemovedProduct,
		"REMOVED_WISHLIST":      RemovedWishlist,
		"REPLIED_TICKET":        RepliedTicket,
		"REVIEWED_PRODUCT":      ReviewedProduct,
		"SEARCHED":              Searched,
		"SERVICE_SUBSCRIBED":    ServiceSubscribed,
		"SERVICE_UNSUBSCRIBED":  ServiceUnsubscribed,
		"VIEWED_PAGE":           ViewedPage,
		"VIEWED_PRODUCT":        ViewedProduct,
	}

	_EventTypeValueToName = map[EventType]string{
		AbandonedCart:        "ABANDONED_CART",
		AddedCompare:         "ADDED_COMPARE",
		AddedProduct:         "ADDED_PRODUCT",
		AddedWishlist:        "ADDED_WISHLIST",
		CampaignBlacklisted:  "CAMPAIGN_BLACKLISTED",
		CampaignBounced:      "CAMPAIGN_BOUNCED",
		CampaignLinkClicked:  "CAMPAIGN_LINK_CLICKED",
		CampaignMarkedSpam:   "CAMPAIGN_MARKED_SPAM",
		CampaignOpened:       "CAMPAIGN_OPENED",
		CampaignSent:         "CAMPAIGN_SENT",
		CampaignSubscribed:   "CAMPAIGN_SUBSCRIBED",
		CampaignUnsubscribed: "CAMPAIGN_UNSUBSCRIBED",
		ChangedSetting:       "CHANGED_SETTING",
		ClickedLink:          "CLICKED_LINK",
		ClosedTicket:         "CLOSED_TICKET",
		CompletedOrder:       "COMPLETED_ORDER",
		EventConfirmed:       "EVENT_CONFIRMED",
		EventDeclined:        "EVENT_DECLINED",
		EventEligible:        "EVENT_ELIGIBLE",
		EventInvited:         "EVENT_INVITED",
		EventNotShow:         "EVENT_NOT_SHOW",
		EventNotInvited:      "EVENT_NOT_INVITED",
		EventParticipated:    "EVENT_PARTICIPATED",
		FormCompiled:         "FORM_COMPILED",
		GenericActiveEvent:   "GENERIC_ACTIVE_EVENT",
		GenericPassiveEvent:  "GENERIC_PASSIVE_EVENT",
		LoggedIn:             "LOGGED_IN",
		LoggedOut:            "LOGGED_OUT",
		OpenedTicket:         "OPENED_TICKET",
		OrderShipped:         "ORDER_SHIPPED",
		RemovedCompare:       "REMOVED_COMPARE",
		RemovedProduct:       "REMOVED_PRODUCT",
		RemovedWishlist:      "REMOVED_WISHLIST",
		RepliedTicket:        "REPLIED_TICKET",
		ReviewedProduct:      "REVIEWED_PRODUCT",
		Searched:             "SEARCHED",
		ServiceSubscribed:    "SERVICE_SUBSCRIBED",
		ServiceUnsubscribed:  "SERVICE_UNSUBSCRIBED",
		ViewedPage:           "VIEWED_PAGE",
		ViewedProduct:        "VIEWED_PRODUCT",
	}
)

func init() {
	var v EventType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EventTypeNameToValue = map[string]EventType{
			interface{}(AbandonedCart).(fmt.Stringer).String():        AbandonedCart,
			interface{}(AddedCompare).(fmt.Stringer).String():         AddedCompare,
			interface{}(AddedProduct).(fmt.Stringer).String():         AddedProduct,
			interface{}(AddedWishlist).(fmt.Stringer).String():        AddedWishlist,
			interface{}(CampaignBlacklisted).(fmt.Stringer).String():  CampaignBlacklisted,
			interface{}(CampaignBounced).(fmt.Stringer).String():      CampaignBounced,
			interface{}(CampaignLinkClicked).(fmt.Stringer).String():  CampaignLinkClicked,
			interface{}(CampaignMarkedSpam).(fmt.Stringer).String():   CampaignMarkedSpam,
			interface{}(CampaignOpened).(fmt.Stringer).String():       CampaignOpened,
			interface{}(CampaignSent).(fmt.Stringer).String():         CampaignSent,
			interface{}(CampaignSubscribed).(fmt.Stringer).String():   CampaignSubscribed,
			interface{}(CampaignUnsubscribed).(fmt.Stringer).String(): CampaignUnsubscribed,
			interface{}(ChangedSetting).(fmt.Stringer).String():       ChangedSetting,
			interface{}(ClickedLink).(fmt.Stringer).String():          ClickedLink,
			interface{}(ClosedTicket).(fmt.Stringer).String():         ClosedTicket,
			interface{}(CompletedOrder).(fmt.Stringer).String():       CompletedOrder,
			interface{}(EventConfirmed).(fmt.Stringer).String():       EventConfirmed,
			interface{}(EventDeclined).(fmt.Stringer).String():        EventDeclined,
			interface{}(EventEligible).(fmt.Stringer).String():        EventEligible,
			interface{}(EventInvited).(fmt.Stringer).String():         EventInvited,
			interface{}(EventNotShow).(fmt.Stringer).String():         EventNotShow,
			interface{}(EventNotInvited).(fmt.Stringer).String():      EventNotInvited,
			interface{}(EventParticipated).(fmt.Stringer).String():    EventParticipated,
			interface{}(FormCompiled).(fmt.Stringer).String():         FormCompiled,
			interface{}(GenericActiveEvent).(fmt.Stringer).String():   GenericActiveEvent,
			interface{}(GenericPassiveEvent).(fmt.Stringer).String():  GenericPassiveEvent,
			interface{}(LoggedIn).(fmt.Stringer).String():             LoggedIn,
			interface{}(LoggedOut).(fmt.Stringer).String():            LoggedOut,
			interface{}(OpenedTicket).(fmt.Stringer).String():         OpenedTicket,
			interface{}(OrderShipped).(fmt.Stringer).String():         OrderShipped,
			interface{}(RemovedCompare).(fmt.Stringer).String():       RemovedCompare,
			interface{}(RemovedProduct).(fmt.Stringer).String():       RemovedProduct,
			interface{}(RemovedWishlist).(fmt.Stringer).String():      RemovedWishlist,
			interface{}(RepliedTicket).(fmt.Stringer).String():        RepliedTicket,
			interface{}(ReviewedProduct).(fmt.Stringer).String():      ReviewedProduct,
			interface{}(Searched).(fmt.Stringer).String():             Searched,
			interface{}(ServiceSubscribed).(fmt.Stringer).String():    ServiceSubscribed,
			interface{}(ServiceUnsubscribed).(fmt.Stringer).String():  ServiceUnsubscribed,
			interface{}(ViewedPage).(fmt.Stringer).String():           ViewedPage,
			interface{}(ViewedProduct).(fmt.Stringer).String():        ViewedProduct,
		}
	}
}

// MarshalJSON is generated so EventType satisfies json.Marshaler.
func (r EventType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EventTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid EventType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so EventType satisfies json.Unmarshaler.
func (r *EventType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EventType should be a string, got %s", data)
	}
	v, ok := _EventTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid EventType %q", s)
	}
	*r = v
	return nil
}
