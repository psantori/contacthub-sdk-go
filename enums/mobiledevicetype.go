// generated by jsonenums -suffix= -type=MobileDeviceType; DO NOT EDIT

package enums

import (
	"encoding/json"
	"fmt"
)

var (
	_MobileDeviceTypeNameToValue = map[string]MobileDeviceType{
		"IOS":           IOS,
		"ANDROID":       Android,
		"WINDOWS_PHONE": WindowsPhone,
		"FIREOS":        FireOS,
	}

	_MobileDeviceTypeValueToName = map[MobileDeviceType]string{
		IOS:          "IOS",
		Android:      "ANDROID",
		WindowsPhone: "WINDOWS_PHONE",
		FireOS:       "FIREOS",
	}
)

func init() {
	var v MobileDeviceType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MobileDeviceTypeNameToValue = map[string]MobileDeviceType{
			interface{}(IOS).(fmt.Stringer).String():          IOS,
			interface{}(Android).(fmt.Stringer).String():      Android,
			interface{}(WindowsPhone).(fmt.Stringer).String(): WindowsPhone,
			interface{}(FireOS).(fmt.Stringer).String():       FireOS,
		}
	}
}

// MarshalJSON is generated so MobileDeviceType satisfies json.Marshaler.
func (r MobileDeviceType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MobileDeviceTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid MobileDeviceType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so MobileDeviceType satisfies json.Unmarshaler.
func (r *MobileDeviceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MobileDeviceType should be a string, got %s", data)
	}
	v, ok := _MobileDeviceTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid MobileDeviceType %q", s)
	}
	*r = v
	return nil
}
