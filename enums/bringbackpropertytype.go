// generated by jsonenums -suffix= -type=BringBackPropertyType; DO NOT EDIT

package enums

import (
	"encoding/json"
	"fmt"
)

var (
	_BringBackPropertyTypeNameToValue = map[string]BringBackPropertyType{
		"SESSION_ID":  SessionId,
		"EXTERNAL_ID": ExternalId,
	}

	_BringBackPropertyTypeValueToName = map[BringBackPropertyType]string{
		SessionId:  "SESSION_ID",
		ExternalId: "EXTERNAL_ID",
	}
)

func init() {
	var v BringBackPropertyType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_BringBackPropertyTypeNameToValue = map[string]BringBackPropertyType{
			interface{}(SessionId).(fmt.Stringer).String():  SessionId,
			interface{}(ExternalId).(fmt.Stringer).String(): ExternalId,
		}
	}
}

// MarshalJSON is generated so BringBackPropertyType satisfies json.Marshaler.
func (r BringBackPropertyType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _BringBackPropertyTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid BringBackPropertyType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so BringBackPropertyType satisfies json.Unmarshaler.
func (r *BringBackPropertyType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BringBackPropertyType should be a string, got %s", data)
	}
	v, ok := _BringBackPropertyTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid BringBackPropertyType %q", s)
	}
	*r = v
	return nil
}
